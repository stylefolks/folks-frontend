// Folks MVP Prisma Schema (기본 기능 + 확장 고려)

// Enums
enum UserRole {
USER
INFLUENCER
BRAND
MASTER
}

enum UserStatus {
ACTIVE
BANNED
DELETED
INACTIVE
}

enum CrewMemberRole {
OWNER
MANAGER
MEMBER
}

enum CrewStatus {
ACTIVE
HIDDEN
BANNED
}

enum PostType {
TALK
COLUMN
}

enum PostVisibility {
PUBLIC
CREW_ONLY
FOLLOWER_ONLY
}

enum SponsorshipType {
MONTHLY
ONETIME
}

enum CrewTabType {
OVERVIEW
POSTS
NOTICE
EVENT
TOPIC
}

enum ReportTargetType {
POST
COMMENT
USER
}

enum ReportStatus {
PENDING
REVIEWED
ACTIONED
}

// Models
model User {
id String @id @default(uuid())
username String
email String @unique
passwordHash String
avatarUrl String?
bio String?
role UserRole
status UserStatus @default(ACTIVE)
followers Follow[] @relation("Following")
following Follow[] @relation("Follower")
posts Post[]
crewMemberships CrewMember[]
sponsorships Sponsorship[] @relation("UserSponsorships")
adCampaigns AdCampaign[] @relation("UserAdCampaigns")
reactions PostReaction[]
viewLogs PostViewLog[]
imageAssets ImageAsset[]
notifications Notification[]
reports ContentReport[]
createdAt DateTime @default(now())
}

model Follow {
follower User @relation("Follower", fields: [followerId], references: [id])
followerId String
following User @relation("Following", fields: [followingId], references: [id])
followingId String
createdAt DateTime @default(now())

@@id([followerId, followingId])
}

model Crew {
id String @id @default(uuid())
name String
description String?
avatarUrl String?
owner User @relation(fields: [ownerId], references: [id])
ownerId String
members CrewMember[]
posts Post[]
status CrewStatus @default(ACTIVE)
sponsorships Sponsorship[]
adCampaigns AdCampaign[]
crewTabs CrewTabConfig[]
externalLinks Json?
slug String? @unique
createdAt DateTime @default(now())
}

model CrewMember {
user User @relation(fields: [userId], references: [id])
userId String
crew Crew @relation(fields: [crewId], references: [id])
crewId String
role CrewMemberRole
joinedAt DateTime @default(now())

@@id([crewId, userId])
}

model Post {
id String @id @default(uuid())
author User @relation(fields: [authorId], references: [id])
authorId String
crew Crew? @relation(fields: [crewId], references: [id])
crewId String?
type PostType
visibility PostVisibility @default(PUBLIC)
title String
content Json
isDraft Boolean @default(false)
publishedAt DateTime?
slug String? @unique
createdAt DateTime @default(now())
tags PostTag[]
reactions PostReaction[]
viewLogs PostViewLog[]
comments Comment[]
reports ContentReport[]
}

model PostTag {
post Post @relation(fields: [postId], references: [id])
postId String
tag Tag @relation(fields: [tagId], references: [id])
tagId String

@@id([postId, tagId])
}

model Tag {
id String @id @default(uuid())
name String @unique
createdAt DateTime @default(now())
postTags PostTag[]
}

model DraftPost {
id String @id @default(uuid())
user User @relation(fields: [userId], references: [id])
userId String
title String
content Json
lastEditedAt DateTime @default(now())
}

model Comment {
id String @id @default(uuid())
post Post @relation(fields: [postId], references: [id])
postId String
author User @relation(fields: [authorId], references: [id])
authorId String
parentCommentId String?
content String
isEdited Boolean @default(false)
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
}

model Notification {
id String @id @default(uuid())
recipient User @relation(fields: [recipientId], references: [id])
recipientId String
type String
sourceId String
isRead Boolean @default(false)
createdAt DateTime @default(now())
}

model NotificationTemplate {
id String @id @default(uuid())
code String @unique
message String
createdAt DateTime @default(now())
}

model ImageAsset {
id String @id @default(uuid())
user User @relation(fields: [userId], references: [id])
userId String
post Post? @relation(fields: [postId], references: [id])
postId String?
url String
uploadedAt DateTime @default(now())
}

model Sponsorship {
id String @id @default(uuid())
sponsor User @relation("UserSponsorships", fields: [sponsorId], references: [id])
sponsorId String
crew Crew @relation(fields: [crewId], references: [id])
crewId String
amount Int
type SponsorshipType
startedAt DateTime
endedAt DateTime?
}

model AdCampaign {
id String @id @default(uuid())
brand User @relation("UserAdCampaigns", fields: [brandId], references: [id])
brandId String
crew Crew @relation(fields: [crewId], references: [id])
crewId String
content String
bannerUrl String
budget Int
startsAt DateTime
endsAt DateTime
}

model PostReaction {
id String @id @default(uuid())
post Post @relation(fields: [postId], references: [id])
postId String
user User @relation(fields: [userId], references: [id])
userId String
type String
createdAt DateTime @default(now())
}

model PostViewLog {
id String @id @default(uuid())
post Post @relation(fields: [postId], references: [id])
postId String
user User @relation(fields: [userId], references: [id])
userId String
viewedAt DateTime @default(now())
}

model CrewTabConfig {
id String @id @default(uuid())
crew Crew @relation(fields: [crewId], references: [id])
crewId String
type CrewTabType
order Int
hashtag String?
isVisible Boolean @default(true)
createdAt DateTime @default(now())
}

model ContentReport {
id String @id @default(uuid())
reporter User @relation(fields: [reporterId], references: [id])
reporterId String
targetType ReportTargetType
targetId String
reason String
status ReportStatus @default(PENDING)
createdAt DateTime @default(now())
}
